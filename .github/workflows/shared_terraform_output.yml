name: "Shared - Terraform Output"

on:
  workflow_call:
    inputs:
      RUNS_ON:
        type: string
        required: true
        description: "Actions Runner, either ubuntu-latest or self-hosted"
      MODULE:
        type: string
        required: true
        description: "Terraform module"
      LOCATION:
        type: string
        required: true
        description: "Azure Region"
      CLIENT_IP:
        type: string
        required: true
        description: "Client IP"
      INITIAL:
        type: string
        required: true
        description: "Initial Deployment (true or false)"
    secrets:
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
      TENANT_ID:
        required: true
    outputs:
      AUTOMATION_ACCOUNT_NAME:
        value: ${{ jobs.terraform_output.outputs.AUTOMATION_ACCOUNT_NAME }}
        description: "Name of the automation account."
      KEY_VAULT_ID:
        value: ${{ jobs.terraform_output.outputs.KEY_VAULT_ID }}
        description: "Id of the key vault to store the admin password."
      LOG_ANALYTICS_WORKSPACE_ID:
        value: ${{ jobs.terraform_output.outputs.LOG_ANALYTICS_WORKSPACE_ID }}
        description: "Id of the log analytics workspace used by the MicrosoftMonitoringAgent."
      LOG_ANALYTICS_WORKSPACE_PRIMARY_SHARED_KEY:
        value: ${{ jobs.terraform_output.outputs.LOG_ANALYTICS_WORKSPACE_PRIMARY_SHARED_KEY }}
        description: "Primary shared key of the log analytics workspace used by the MicrosoftMonitoringAgent."
      MGMT_RESOURCE_GROUP_NAME:
        value: ${{ jobs.terraform_output.outputs.MGMT_RESOURCE_GROUP_NAME }}
        description: "Name of the management resource group."
      RECOVERY_SERVICES_VAULT_ID:
        value: ${{ jobs.terraform_output.outputs.RECOVERY_SERVICES_VAULT_ID }}
        description: "Id of the recovery service vault for the backup of the virtual machine."
      RECOVERY_SERVICES_VAULT_NAME:
        value: ${{ jobs.terraform_output.outputs.RECOVERY_SERVICES_VAULT_NAME }}
        description: "Name of the recovery service vault for the backup of the virtual machine."
      SUBNET_ID:
        value: ${{ jobs.terraform_output.outputs.SUBNET_ID }}
        description: "Id of the subnet used for the private IP address of the virtual machine."

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  MGMT_RESOURCE_GROUP_NAME: ${{ vars.PROJECT_CUSTOMER }}-${{ vars.PROJECT_NAME }}-${{ vars.PROJECT_ENVIRONMENT }}-rg-mgmt
  PLAN_FILE: ${{ inputs.MODULE }}.tfplan
  STATE_KEY: ${{ vars.PROJECT_CUSTOMER }}-${{ vars.PROJECT_NAME }}-${{ vars.PROJECT_ENVIRONMENT }}-${{ inputs.MODULE }}.tfstate
  WORKING_DIRECTORY: ./modules/${{ inputs.MODULE }}

jobs:
  terraform_output:
    name: "Terraform Output"
    # runs-on: ubuntu-latest
    runs-on: ${{ inputs.RUNS_ON }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    outputs:
      AUTOMATION_ACCOUNT_NAME: ${{ steps.terraform_output.outputs.AUTOMATION_ACCOUNT_NAME }}
      KEY_VAULT_ID: ${{ steps.terraform_output.outputs.KEY_VAULT_ID }}
      LOG_ANALYTICS_WORKSPACE_ID: ${{ steps.terraform_output.outputs.LOG_ANALYTICS_WORKSPACE_ID }}
      LOG_ANALYTICS_WORKSPACE_PRIMARY_SHARED_KEY: ${{ steps.terraform_output.outputs.LOG_ANALYTICS_WORKSPACE_PRIMARY_SHARED_KEY }}
      mgmt_resource_group_name: ${{ steps.terraform_output.outputs.mgmt_resource_group_name }}
      RECOVERY_SERVICES_VAULT_ID: ${{ steps.terraform_output.outputs.RECOVERY_SERVICES_VAULT_ID }}
      RECOVERY_SERVICES_VAULT_NAME: ${{ steps.terraform_output.outputs.RECOVERY_SERVICES_VAULT_NAME }}
      SUBNET_ID: ${{ steps.terraform_output.outputs.SUBNET_ID }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          # required for terraform output
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          export TF_CLI_ARGS_init="-backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME }} -backend-config=storage_account_name=${{ vars.STATE_STORAGE_ACCOUNT_NAME }} -backend-config=container_name=${{ vars.STATE_CONTAINER_NAME }} -backend-config=key=${{ env.STATE_KEY }}"
          terraform init

      - name: Terraform Output
        id: terraform_output
        run: |
          terraform output
          echo "AUTOMATION_ACCOUNT_NAME=`terraform output automation_account_name`" >> $GITHUB_OUTPUT
          echo "KEY_VAULT_ID=`terraform output key_vault_id`" >> $GITHUB_OUTPUT
          echo "LOG_ANALYTICS_WORKSPACE_ID=`terraform output log_analytics_workspace_id`" >> $GITHUB_OUTPUT
          echo "LOG_ANALYTICS_WORKSPACE_PRIMARY_SHARED_KEY=`terraform output log_analytics_workspace_primary_shared_key`" >> $GITHUB_OUTPUT
          echo "MGMT_RESOURCE_GROUP_NAME=`terraform output mgmt_resource_group_name`" >> $GITHUB_OUTPUT
          echo "RECOVERY_SERVICES_VAULT_ID=`terraform output recovery_services_vault_id`" >> $GITHUB_OUTPUT
          echo "RECOVERY_SERVICES_VAULT_NAME=`terraform output recovery_services_vault_name`" >> $GITHUB_OUTPUT
          echo "SUBNET_ID=`terraform output subnet_id`" >> $GITHUB_OUTPUT
