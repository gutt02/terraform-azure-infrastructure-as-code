name: 'Terraform Destroy'

on:
  workflow_dispatch:
    branches: [ "main" ]
    inputs:
      location:
        description: 'Azure Region'
        required: true
        default: 'westeurope'

permissions:
  contents: read

env:
  plan_file: destroy.tfplan

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Add IP of deployment agent to the Key Vault
    - name: Add keyvault network rule
      run: |
        export TF_VAR_agent_ip=$(curl -s ipinfo.io/ip)
        az login --service-principal --username ${{ secrets.CLIENT_ID }} --password ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.TENANT_ID }}
        az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}
        az keyvault network-rule add --name azc-iac-vse-kv --ip-address ${TF_VAR_agent_ip}
        az logout
      continue-on-error: true

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:  
        ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        TF_CLI_ARGS_init: '-backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME }} -backend-config=storage_account_name=${{ vars.STATE_STORAGE_ACCOUNT_NAME }} -backend-config=container_name=${{ vars.STATE_CONTAINER_NAME }} -backend-config=key=${{ vars.STATE_KEY }}'

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan Destroy
      run: |
        export TF_VAR_agent_ip=$(curl -s ipinfo.io/ip)
        terraform plan -destroy -input=false -var=location=${{ github.event.inputs.location }} -out=${{ env.plan_file }}
      env:
        ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        TF_VAR_client_secret: ${{ secrets.CLIENT_SECRET }}
        TF_VAR_user_object_id: ${{ secrets.USER_OBJECT_ID }}
        TF_VAR_windows_virtual_machine_admin_username: ${{ secrets.WINDOWS_VIRTUAL_MACHINE_ADMIN_USERNAME }}

    - name: Terraform Apply Destroy
      run: terraform apply -input=false ${{ env.plan_file }}
      env:
        ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
