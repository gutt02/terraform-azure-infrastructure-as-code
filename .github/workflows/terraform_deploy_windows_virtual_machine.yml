name: "Terraform Deploy Shared"

on:
  workflow_call:
    inputs:
      location:
        type: string
        required: true
        default: "westeurope"
        description: "Azure Region"
      client_ip:
        type: string
        required: true
        default: "94.134.104.164"
        description: "Client IP"
      initial:
        type: string
        required: true
        default: "false"
        description: "Initial Deployment (true or false)"
      automation_account_name:
        type: string
        description: "Name of the automation account."
      key_vault_id:
        type: string
        description: "Id of the key vault to store the admin password."
      log_analytics_workspace_id:
        type: string
        description: "Id of the log analytics workspace used by the MicrosoftMonitoringAgent."
      mgmt_resource_group_name:
        type: string
        description: "Name of the management resource group."
      recovery_service_vault_id:
        type: string
        description: "Id of the recovery service vault for the backup of the virtual machine."
      recovery_services_vault_name:
        type: string
        description: "Name of the recovery service vault for the backup of the virtual machine."
      subnet_id:
        type: string
        description: "Id of the subnet used for the private IP address of the virtual machine."
    secrets:
      log_analytics_workspace_primary_shared_key:
        required: true
        description: "Primary shared key of the log analytics workspace used by the MicrosoftMonitoringAgent."

permissions:
  contents: read

env:
  mgmt_resource_group_name: azc-iac-vse-rg-mgmt
  state_key: azc-iac-vse-wvm.tfstate
  plan_file: deploy.tfplan
  working_directory: ./modules/windows-virtual-machine

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Azure login
      - name: Azure login
        run: |
          az login --service-principal --username ${{ secrets.CLIENT_ID }} --password ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.TENANT_ID }}
          az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}
        continue-on-error: true

      # Add keyvault network rule
      - name: Add keyvault network rule
        if: github.event.inputs.initial == 'false'
        run: |
          export TF_VAR_agent_ip=$(curl -s ipinfo.io/ip)
          az keyvault network-rule add --name azc-iac-vse-kv --ip-address ${TF_VAR_agent_ip}
        continue-on-error: true

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          TF_CLI_ARGS_init: "-backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME }} -backend-config=storage_account_name=${{ vars.STATE_STORAGE_ACCOUNT_NAME }} -backend-config=container_name=${{ vars.STATE_CONTAINER_NAME }} -backend-config=key=${{ env.state_key }}"
          working_directory: modules/shared
        working-directory: ${{ env.working_directory }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.working_directory }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          export TF_VAR_agent_ip="$(curl -s ipinfo.io/ip)/32"
          terraform plan -input=false -var=location=${{ github.event.inputs.location }} -var=client_ip=$TF_VAR_client_ip -out=${{ env.plan_file }}
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          TF_VAR_client_ip: '{"name":"ClientIP01","cidr":"${{ github.event.inputs.client_ip }}/32","start_ip_address":"${{ github.event.inputs.client_ip }}","end_ip_address":"${{ github.event.inputs.client_ip }}"}'
          TF_VAR_client_secret: ${{ secrets.CLIENT_SECRET }}
          TF_VAR_admin_username: ${{ vars.ADMIN_USERNAME }}
          TF_VAR_automation_account_name: github.event.inputs.automation_account_name
          TF_VAR_key_vault_id: github.event.inputs.key_vault_id
          TF_VAR_log_analytics_workspace_id: github.event.inputs.log_analytics_workspace_id
          TF_VAR_log_analytics_workspace_primary_shared_key: github.event.secrets.log_analytics_workspace_primary_shared_key
          TF_VAR_mgmt_resource_group_name: github.event.inputs.mgmt_resource_group_name
          TF_VAR_inputs.recovery_service_vault_id: github.event.inputs.recovery_service_vault_id
          TF_VAR_recovery_services_vault_name: github.event.inputs.recovery_services_vault_name
          TF_VAR_inputs.subnet_id: github.event.inputs.subnet_id
        working-directory: ${{ env.working_directory }}

      - name: Terraform Apply
        run: terraform apply -input=false ${{ env.plan_file }}
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        working-directory: ${{ env.working_directory }}

      # Remove keyvault network rule
      - name: Remove keyvault network rule
        run: |
          export TF_VAR_agent_ip="$(curl -s ipinfo.io/ip)/32"
          az keyvault network-rule remove --name azc-iac-vse-kv --ip-address ${TF_VAR_agent_ip}
        continue-on-error: true

      # Azure logout
      - name: Azure logout
        run: |
          az logout
        continue-on-error: true
